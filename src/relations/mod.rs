mod merkle_tree;
mod xor;

use clap::ValueEnum;
pub use merkle_tree::MerkleTreeRelation;
pub use xor::XorRelation;

/// All implemented relations.
///
/// They should have corresponding definition in submodule.
#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug, ValueEnum)]
pub enum Relation {
    Xor,
    MerkleTree,
}

/// Output generated by `SnarkRelation`.
#[derive(Clone, Eq, PartialEq, Hash, Debug)]
pub struct Artifacts {
    pub verifying_key: Vec<u8>,
    pub proof: Vec<u8>,
    pub public_input: Vec<u8>,
}

/// Common interface for the relations.
pub trait SnarkRelation: Default {
    /// String identifier of relation.
    ///
    /// By default, empty string.
    fn id() -> &'static str {
        ""
    }

    /// Produce artifacts.
    fn generate_artifacts(&self) -> Artifacts;
}
