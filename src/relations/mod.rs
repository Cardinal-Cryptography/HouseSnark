use clap::ValueEnum;

/// All implemented relations.
///
/// They should have corresponding definition in submodule.
#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug, ValueEnum)]
pub enum Relation {
    Xor,
    MerkleTree,
}

/// Output generated by `SnarkRelation`.
///
/// `Format` will usually be just a byte slice.
#[derive(Clone, Eq, PartialEq, Hash)]
pub struct Artifacts<Format> {
    pub verifying_key: Format,
    pub proof: Format,
    pub public_input: Format,
}

/// Common interface for the relations.
pub trait SnarkRelation {
    /// String identifier of relation.
    ///
    /// By default, empty string.
    fn id() -> &'static str {
        ""
    }

    /// Produce artifacts.
    fn generate_artifacts<Format>(&self) -> Artifacts<Format>;
}
